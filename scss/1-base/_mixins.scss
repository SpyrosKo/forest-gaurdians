@function px-to-em($px, $base: 16px) {
  @return ($px / $base) * 1em;
}

// ex. 
// p {
//   font-size: px-to-em(18px); // Equivalent to 1.125em with a base font size of 16px
// }

// Define your breakpoints as a Sass map
$breakpoints: (
  'xs': 320px,
  'sm': 480px,
  'md': 768px,
  'lg': 992px,
  'xl': 1200px,
  'xxl': 1440px,
);

// Create a mixin for handling media queries
@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Invalid breakpoint: #{$breakpoint}.";
  }
}

// Mixins in Sass allow you to define reusable chunks of styles that can be included in other selectors using the `@include` directive. They can accept arguments, making them more flexible and adaptable to different use cases. Here are some examples of useful mixins:

// 1. Media Query Mixin:

// ```scss
// @mixin respond-to($breakpoint) {
//   @if $breakpoint == 'sm' {
//     @media (min-width: 480px) {
//       @content;
//     }
//   } @else if $breakpoint == 'md' {
//     @media (min-width: 768px) {
//       @content;
//     }
//   } @else if $breakpoint == 'lg' {
//     @media (min-width: 992px) {
//       @content;
//     }
//   } @else {
    // @warn "Invalid breakpoint: #{$breakpoint}.";
//   }
// }

// // Usage:
// .container {
//   width: 100%;

//   @include respond-to('md') {
//     width: 80%;
//   }

//   @include respond-to('lg') {
//     width: 60%;
//   }
// }
// ```

// 2. Clearfix Mixin:

// ```scss
// @mixin clearfix {
//   &::after {
//     content: "";
//     display: table;
//     clear: both;
//   }
// }

// // Usage:
// .container {
//   @include clearfix;
// }
// ```

// 3. Flexbox Mixin:

// ```scss
// @mixin flexbox($direction: row, $justify: flex-start, $align: stretch) {
//   display: flex;
//   flex-direction: $direction;
//   justify-content: $justify;
//   align-items: $align;
// }

// // Usage:
// .container {
//   @include flexbox(row, center, center);
// }
// ```

// 4. Border Radius Mixin:

// ```scss
// @mixin border-radius($radius) {
//   border-radius: $radius;
// }

// // Usage:
// .button {
//   @include border-radius(5px);
// }
// ```

// 5. Box Shadow Mixin:

// ```scss
// @mixin box-shadow($x: 0, $y: 0, $blur: 4px, $spread: 0, $color: rgba(0, 0, 0, 0.1)) {
//   box-shadow: $x $y $blur $spread $color;
// }

// // Usage:
// .card {
//   @include box-shadow(0, 2px, 4px, 0, rgba(0, 0, 0, 0.1));
// }
// ```

// These are just a few examples of mixins that you can use in your projects. You can create custom mixins based on your needs and design requirements, making your Sass code more maintainable and easier to work with.
